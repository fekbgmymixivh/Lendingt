// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract SimpleLending {
    using SafeMath for uint256;

    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => uint256) public loanAmounts;
    mapping(address => uint256) public loanDueDates;
    mapping(address => uint256) public borrowedAmounts;
    mapping(address => uint256) public creditLimits;

    event LoanIssued(address borrower, uint256 amount, uint256 dueDate);
    event LoanRepaid(address borrower, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function setCreditLimit(address borrower, uint256 limit) external onlyOwner {
        creditLimits[borrower] = limit;
    }

    function borrow(uint256 amount, uint256 durationDays) external {
        require(amount > 0, "Borrow amount must be greater than 0");
        require(balances[msg.sender] == 0, "You have an existing loan");
        require(amount <= creditLimits[msg.sender], "Exceeds credit limit");

        uint256 interest = calculateInterest(amount, durationDays);
        uint256 totalAmount = amount.add(interest);

        // Transfer total amount to borrower
        IERC20(msg.sender).transferFrom(owner, address(this), totalAmount);

        // Update balances and loan details
        balances[msg.sender] = totalAmount;
        loanAmounts[msg.sender] = totalAmount;
        loanDueDates[msg.sender] = block.timestamp.add(durationDays * 1 days);
        borrowedAmounts[msg.sender] = borrowedAmounts[msg.sender].add(amount);

        emit LoanIssued(msg.sender, totalAmount, loanDueDates[msg.sender]);
    }

    function repay() external {
        require(balances[msg.sender] > 0, "No existing loan");

        // Transfer repaid amount to owner
        IERC20(msg.sender).transfer(owner, balances[msg.sender]);

        // Clear borrower's balances and loan details
        balances[msg.sender] = 0;
        loanAmounts[msg.sender] = 0;
        loanDueDates[msg.sender] = 0;

        emit LoanRepaid(msg.sender, balances[msg.sender]);
    }

    function calculateInterest(uint256 amount, uint256 durationDays) internal pure returns (uint256) {
        // Simple interest calculation for demonstration purposes
        uint256 annualInterestRate = 5; // 5% annual interest rate
        uint256 dailyInterestRate = (annualInterestRate.mul(1e18)).div(36500); // Daily interest rate
        return (amount.mul(dailyInterestRate).mul(durationDays)).div(1e18);
    }

    function getLoanDetails(address borrower) external view returns (uint256, uint256) {
        return (loanAmounts[borrower], loanDueDates[borrower]);
    }
}
